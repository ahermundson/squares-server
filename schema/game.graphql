type Game {
  _id: ID!
  firstQuarterHome: Int
  firstQuarterAway: Int
  secondQuarterHome: Int
  secondQuarterAway: Int
  thirdQuarterHome: Int
  thirdQuarterAway: Int
  fourthQuarterHome: Int
  fourthQuarterAway: Int
  boardId: String!
  awayTeam: Team!
  homeTeam: Team!
  homeTeamScore: Int
  awayTeamScore: Int
}

type Query {
  allGames: [Game!]
}

type newGameResponse {
  ok: Boolean!
  newGame: Game
}

type updateScoreResponse {
  ok: Boolean!
  udpatedGame: Game
}

type Mutation {
  createNewGame(homeTeamId: String!, awayTeamId: String!): newGameResponse!
  updateScore(homeTeamScore: Int!, awayTeamScore: Int!, gameId: ID!): Game
}

type Subscription {
  scoreUpdated(gameId: ID!): Game!
}
